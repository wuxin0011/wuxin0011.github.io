<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RabbitMQ</title>
    <link href="/2022/08/31/RabbitMQ/"/>
    <url>/2022/08/31/RabbitMQ/</url>
    
    <content type="html"><![CDATA[<h3 id="1、入门"><a href="#1、入门" class="headerlink" title="1、入门"></a>1、入门</h3><h4 id="1-1-什么是-MQ-？"><a href="#1-1-什么是-MQ-？" class="headerlink" title="1.1 什么是 MQ ？"></a>1.1 什么是 MQ ？</h4><p>本质是一个队列，FIFO 先入先出，队列中存放内容是message，还是一种进程通信机制，用户上下游传递消息，使用了MQ之后，消息服务只需要依赖MQ，不要在依赖于其他。</p><h4 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2 安装"></a>1.2 安装</h4><p>docker方式安装 <a href="https://hub.docker.com/_/rabbitmq?tab=description">Rabbitmq - Official Image | Docker Hub</a></p><p><strong>安装docker</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## centos 安装docker</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1、卸载旧版本docker</span><br>sudo yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-engine<br>              <br><span class="hljs-meta prompt_"># </span><span class="language-bash">2、安装yum-utils</span>  <br>sudo yum install -y yum-utils   <br><span class="hljs-meta prompt_"># </span><span class="language-bash">3、安装docker</span><br>sudo yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br>  <br>sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动docker</span><br>sudo systemctl start docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">测试查看docker信息</span><br>docker -v           <br></code></pre></td></tr></table></figure><p><strong>使用阿里云docker加速服务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 添加daemon.json 文件</span></span><br>sudo vim /etc/docker/daemon.json<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 复制内容</span></span><br><br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://ezs5jiab.mirror.aliyuncs.com&quot;]<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 保存之后退出重启docker</span></span><br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><p><strong>安装Rabbit-MQ</strong>  <a href="https://www.rabbitmq.com/download.html">🔗</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 安装</span></span><br>docker run -d --name myrabbit \<br>-e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin \<br>-p 15672:15672  -p 5672:5672 -p 25672:25672 -p 61613:61613 -p 1883:1883 \<br>rabbitmq:management<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 查看日志</span></span><br>docker logs -f myrabbit<br></code></pre></td></tr></table></figure><blockquote><p>查看地址 localhost:15672</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/wuxin0011/wuxin@main//blog-resource/typora/image-20220520165805354.png" alt="image-20220520165805354">​</p><h3 id="2、核心部分"><a href="#2、核心部分" class="headerlink" title="2、核心部分"></a>2、核心部分</h3><ul><li>简单模式</li><li>工作模式</li><li>发布订阅</li><li>路由</li><li>主题</li><li>发布确认</li></ul><h4 id="2-1-简单模式"><a href="#2-1-简单模式" class="headerlink" title="2.1 简单模式"></a>2.1 简单模式</h4><p>官方文档 ：<a href="https://www.rabbitmq.com/tutorials/tutorial-one-java.html">简单模式</a></p><p><img src="https://fastly.jsdelivr.net/gh/wuxin0011/wuxin@main//blog-resource/typora/image-20220520221932750.png" alt="image-20220520221932750">​</p><p>创建一个简单maven项目，导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.rabbitmq/amqp-client --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.rabbitmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>amqp-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.10.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建生产者 Producer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// ip port</span><br>        <span class="hljs-comment">// 1、创建连接工程</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        <span class="hljs-comment">// 2、创建连接connection</span><br>        connectionFactory.setHost(<span class="hljs-string">&quot;192.168.56.40&quot;</span>);<br>        connectionFactory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;admin&quot;</span>);<br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-comment">// 3、获取连接通道</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建连接 connection</span><br>            connection = connectionFactory.newConnection(<span class="hljs-string">&quot;生产者&quot;</span>);<br>            <span class="hljs-comment">// 创建channel连接通道</span><br>            channel = connection.createChannel();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue1&quot;</span>;<br>            <span class="hljs-comment">// 4、通过创建交换机、神明队列、绑定关系、路由key，发送消息、接收消息</span><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 参数说明</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@params</span>1 队列名称</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@params</span>2 是否持久化</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@params</span>3 排他性，是否独立（是否是一个独占队列）</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@params</span>4 是否自动删除，随着最后一个消费者消息完毕以后是否自动把队列自动删除</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@params</span>5 携带附带参数</span><br><span class="hljs-comment">             */</span><br>            channel.queueDeclare(queueName, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>            <span class="hljs-comment">// 5、准备消息内容</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;恭喜你！接收到一条rabbitMq消息！&quot;</span>;<br>            <span class="hljs-comment">// 6、发送消息队列 queue</span><br><br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, queueName, <span class="hljs-literal">null</span>, message.getBytes());<br>            <span class="hljs-comment">// 消息发送成功</span><br>            System.out.println(<span class="hljs-string">&quot;消息发送成功！！！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 7、关闭连接</span><br>            <span class="hljs-keyword">if</span> (channel != <span class="hljs-literal">null</span> &amp;&amp; channel.isOpen()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    channel.close();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-comment">// 8、关闭通道</span><br>            <span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span> &amp;&amp; connection.isOpen()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    connection.close();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建消费者，代码基本上Producter类型，只有消息发布部分有改动，一个是用来发布消息，消费者使用了接受消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// ip port</span><br>        <span class="hljs-comment">// 1、创建连接工程</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        <span class="hljs-comment">// 2、创建连接connection</span><br>        connectionFactory.setHost(<span class="hljs-string">&quot;192.168.56.40&quot;</span>);<br>        connectionFactory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;admin&quot;</span>);<br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-comment">// 3、获取连接通道</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建连接 connection</span><br>            connection = connectionFactory.newConnection(<span class="hljs-string">&quot;消费者&quot;</span>);<br>            <span class="hljs-comment">// 创建channel连接通道</span><br>            channel = connection.createChannel();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue1&quot;</span>;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 参数说明</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@params</span>1 队列名称</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@params</span>2 是否持久化</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@params</span>3 排他性，是否独立（是否是一个独占队列）</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@params</span>4 是否自动删除，随着最后一个消费者消息完毕以后是否自动把队列自动删除</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@params</span>5 携带附带参数</span><br><span class="hljs-comment">             */</span><br>            channel.queueDeclare(queueName, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>            <span class="hljs-comment">// 准备发送消息内容</span><br>            <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, delivery) -&gt; &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(delivery.getBody(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot; [x] Received &#x27;&quot;</span> + message + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>            &#125;;<br>            channel.basicConsume(queueName, <span class="hljs-literal">true</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);<br><br><br>            System.in.read();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 7、关闭连接</span><br>            <span class="hljs-keyword">if</span> (channel != <span class="hljs-literal">null</span> &amp;&amp; channel.isOpen()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    channel.close();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-comment">// 8、关闭通道</span><br>            <span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span> &amp;&amp; connection.isOpen()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    connection.close();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>创建完毕之后依次启动生产者、消费者（启动之前确保rabbitMq启动了）</p><p>生产者结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">SLF4J: Failed to load class <span class="hljs-string">&quot;org.slf4j.impl.StaticLoggerBinder&quot;</span>.<br>SLF4J: Defaulting to no-operation (NOP) logger implementation<br>SLF4J: See http:<span class="hljs-comment">//www.slf4j.org/codes.html#StaticLoggerBinder for further details.</span><br>消息发送成功！！！<br></code></pre></td></tr></table></figure><p>消费者结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">SLF4J: Failed to load class <span class="hljs-string">&quot;org.slf4j.impl.StaticLoggerBinder&quot;</span>.<br>SLF4J: Defaulting to no-operation (NOP) logger implementation<br>SLF4J: See http:<span class="hljs-comment">//www.slf4j.org/codes.html#StaticLoggerBinder for further details.</span><br>[x] Received <span class="hljs-string">&#x27;恭喜你！接收到一条rabbitMq消息！&#x27;</span><br></code></pre></td></tr></table></figure><p>测试完毕！接受到消息了！</p><h4 id="2-2-工作模式"><a href="#2-2-工作模式" class="headerlink" title="2.2 工作模式"></a>2.2 工作模式</h4><p>官方文档 ： <a href="https://www.rabbitmq.com/tutorials/tutorial-two-java.html">工作模式</a></p><p><img src="https://fastly.jsdelivr.net/gh/wuxin0011/wuxin@main//blog-resource/typora/image-20220520221650423.png" alt="image-20220520221650423">​</p><blockquote><p>面试题</p></blockquote><ul><li><p>可以存着没有交换机队列吗？</p><p>不可能！没有绑定交换机队列，自动绑定默认交换机</p></li></ul><h4 id="2-3-发布订阅模式"><a href="#2-3-发布订阅模式" class="headerlink" title="2.3 发布订阅模式"></a>2.3 发布订阅模式</h4><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20220521214812437.png" alt="image-20220521214812437">​</p><h4 id="2-4-路由模式"><a href="#2-4-路由模式" class="headerlink" title="2.4 路由模式"></a>2.4 路由模式</h4><h4 id="2-5-主题模式"><a href="#2-5-主题模式" class="headerlink" title="2.5 主题模式"></a>2.5 主题模式</h4><h4 id="2-6-发布确认模式"><a href="#2-6-发布确认模式" class="headerlink" title="2.6 发布确认模式"></a>2.6 发布确认模式</h4><h3 id="3、高级部分"><a href="#3、高级部分" class="headerlink" title="3、高级部分"></a>3、高级部分</h3><ul><li><p>死信队列</p></li><li><p>延迟队列</p></li><li><p>发布高级确认</p><ul><li>发布确认</li><li>回退消息</li><li>备份交换机</li></ul></li><li><p>幂等性</p></li><li><p>优先级</p></li><li><p>惰性队列</p></li></ul><h3 id="4、集群部分"><a href="#4、集群部分" class="headerlink" title="4、集群部分"></a>4、集群部分</h3><ul><li>搭建</li><li>镜像队列</li><li>实现高可用高负载</li><li>联邦交换机</li><li>联邦交换队列</li><li>shovel</li></ul>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot 启动原理</title>
    <link href="/2022/08/31/SpringBoot-%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/"/>
    <url>/2022/08/31/SpringBoot-%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>程序入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Start</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Start.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a><strong>SpringApplication</strong></h3><h4 id="1、初始化"><a href="#1、初始化" class="headerlink" title="1、初始化"></a>1、初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(Class&lt;?&gt;[] primarySources, String[] args)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplication</span>(primarySources)).run(args);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">SpringApplication</span><span class="hljs-params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;<br>       <span class="hljs-built_in">this</span>.sources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>(); <span class="hljs-comment">// </span><br>       <span class="hljs-built_in">this</span>.bannerMode = Mode.CONSOLE;<span class="hljs-comment">// 控制banner</span><br>       <span class="hljs-built_in">this</span>.logStartupInfo = <span class="hljs-literal">true</span>;<span class="hljs-comment">// 是否启动日志</span><br>       <span class="hljs-built_in">this</span>.addCommandLineProperties = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 读取命令行配置</span><br>       <span class="hljs-built_in">this</span>.addConversionService = <span class="hljs-literal">true</span>; <span class="hljs-comment">//添加转换器</span><br>       <span class="hljs-built_in">this</span>.headless = <span class="hljs-literal">true</span>; <span class="hljs-comment">// </span><br>       <span class="hljs-built_in">this</span>.registerShutdownHook = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 注册重启</span><br>       <span class="hljs-built_in">this</span>.additionalProfiles = Collections.emptySet();<span class="hljs-comment">// 读取配置环境</span><br>       <span class="hljs-built_in">this</span>.isCustomEnvironment = <span class="hljs-literal">false</span>;<span class="hljs-comment">// 是否是自定义环境</span><br>       <span class="hljs-built_in">this</span>.lazyInitialization = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 是否懒加载</span><br>       <span class="hljs-built_in">this</span>.applicationContextFactory = ApplicationContextFactory.DEFAULT;<br>       <span class="hljs-built_in">this</span>.applicationStartup = ApplicationStartup.DEFAULT; <span class="hljs-comment">// ApplicationStartup DEFAULT = new DefaultApplicationStartup();</span><br>       <span class="hljs-built_in">this</span>.resourceLoader = resourceLoader;<span class="hljs-comment">// 资源加载器</span><br>       Assert.notNull(primarySources, <span class="hljs-string">&quot;PrimarySources must not be null&quot;</span>);<br>       <span class="hljs-built_in">this</span>.primarySources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>(Arrays.asList(primarySources)); <span class="hljs-comment">// 主程序</span><br>       <span class="hljs-built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();<span class="hljs-comment">//  SERVLET||REACTIVE; 是servlet还是reactive环境</span><br>       <span class="hljs-comment">// BootstrapRegistryInitializer</span><br><span class="hljs-built_in">this</span>.bootstrapRegistryInitializers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(<span class="hljs-built_in">this</span>.getSpringFactoriesInstances(BootstrapRegistryInitializer.class));<br>       <span class="hljs-comment">// ApplicationContextInitializer</span><br><span class="hljs-built_in">this</span>.setInitializers(<span class="hljs-built_in">this</span>.getSpringFactoriesInstances(ApplicationContextInitializer.class));<br><span class="hljs-comment">// ApplicationListener        </span><br><span class="hljs-built_in">this</span>.setListeners(<span class="hljs-built_in">this</span>.getSpringFactoriesInstances(ApplicationListener.class));<br>       <span class="hljs-built_in">this</span>.mainApplicationClass = <span class="hljs-built_in">this</span>.deduceMainApplicationClass();<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>注册  BootstrapRegistryInitializer</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.bootstrapRegistryInitializers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(<span class="hljs-built_in">this</span>.getSpringFactoriesInstances(BootstrapRegistryInitializer.class));<br><br><span class="hljs-comment">// </span><br><span class="hljs-keyword">private</span> &lt;T&gt; Collection&lt;T&gt; <span class="hljs-title function_">getSpringFactoriesInstances</span><span class="hljs-params">(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes, Object... args)</span> &#123;<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClassLoader();<br>        <span class="hljs-comment">// 1、从配置文件读取名称加载</span><br>        Set&lt;String&gt; names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>(SpringFactoriesLoader.loadFactoryNames(type, classLoader));<br>        <span class="hljs-comment">// 2、获取构造器实例</span><br> List&lt;T&gt; instances = <span class="hljs-built_in">this</span>.createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);<br>        <span class="hljs-comment">// 3、排序</span><br> AnnotationAwareOrderComparator.sort(instances);<br>        <span class="hljs-keyword">return</span> instances;<br>&#125;<br><br><span class="hljs-comment">// 1、加载配置</span><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; <span class="hljs-title function_">loadSpringFactories</span><span class="hljs-params">(ClassLoader classLoader)</span> &#123;<br>        Map&lt;String, List&lt;String&gt;&gt; result = (Map)cache.get(classLoader);<br>        <span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">HashMap</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                 <span class="hljs-comment">//核心 从这里知道读取配置文件位置 默认</span><br>                <span class="hljs-type">Enumeration</span> <span class="hljs-variable">urls</span> <span class="hljs-operator">=</span> classLoader.getResources(<span class="hljs-string">&quot;META-INF/spring.factories&quot;</span>);<br><span class="hljs-comment">// ... 这里省略迭代器遍历注册</span><br>                result.replaceAll((factoryType, implementations) -&gt; &#123;<br>                    <span class="hljs-keyword">return</span> (List)implementations.stream().distinct().collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));<br>                &#125;);<br><span class="hljs-comment">// 添加到缓存中，下次读取。根据类名读取</span><br>                cache.put(classLoader, result);<br>                <span class="hljs-keyword">return</span> result;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException var14) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Unable to load factories from location [META-INF/spring.factories]&quot;</span>, var14);<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">// 2、获取构造器实例</span><br><span class="hljs-keyword">private</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">createSpringFactoriesInstances</span><span class="hljs-params">(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes, ClassLoader classLoader, Object[] args, Set&lt;String&gt; names)</span> &#123;<br>        List&lt;T&gt; instances = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(names.size());<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">var7</span> <span class="hljs-operator">=</span> names.iterator();<br><br>        <span class="hljs-keyword">while</span>(var7.hasNext()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String)var7.next();<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 通过类名反射机制调用，读取Class&lt;T&gt; class</span><br>                Class&lt;?&gt; instanceClass = ClassUtils.forName(name, classLoader);<br>                Assert.isAssignable(type, instanceClass);<br>                Constructor&lt;?&gt; constructor = instanceClass.getDeclaredConstructor(parameterTypes);<br>                <span class="hljs-comment">// 获取构造器实例</span><br> <span class="hljs-type">T</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> BeanUtils.instantiateClass(constructor, args);<br>                <span class="hljs-comment">// 添加到构造器中</span><br>                instances.add(instance);<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable var12) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Cannot instantiate &quot;</span> + type + <span class="hljs-string">&quot; : &quot;</span> + name, var12);<br>            &#125;<br>        &#125;<br><span class="hljs-comment">// 返回</span><br>        <span class="hljs-keyword">return</span> instances;<br>    &#125;<br><br><br><span class="hljs-comment">// 排序 通过debug这里调用的是Integer类型排序方法 List&lt;Integer&gt; list</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(List&lt;?&gt; list)</span> &#123;<br>        <span class="hljs-keyword">if</span> (list.size() &gt; <span class="hljs-number">1</span>) &#123;<br>            list.sort(INSTANCE);<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>配置文件</p><p><code>spring-boot:2.7.1.META-INF\spring.factorie</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">org.springframework.context.ApplicationContextInitializer</span>=<span class="hljs-string">\</span><br><span class="hljs-string">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</span><br><span class="hljs-string">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</span><br><span class="hljs-string">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</span><br><span class="hljs-string">org.springframework.boot.rsocket.context.RSocketPortInfoApplicationContextInitializer,\</span><br><span class="hljs-string">org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/wuxin0011/blog-resource@main/picgo/ApplicaitonContextinitializer.png">​</p><p>像 BootstrapRegistryInitializer</p><p>另外几个配置是从其他配置文件中读取的</p><p>例如</p><p><img src="https://cdn.staticaly.com/gh/wuxin0011/blog-resource@main/picgo/ApplicaitonContextinitializerAutoConfig.png">​</p><blockquote><p>注册 ApplicationContextInitializer 、ApplicationListener</p></blockquote><p>同 <code>BootstrapRegistryInitializer</code>加载原理</p><h4 id="2、调用run方法"><a href="#2、调用run方法" class="headerlink" title="2、调用run方法"></a>2、调用run方法</h4><blockquote><p>核心</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.nanoTime();<br>        <span class="hljs-type">DefaultBootstrapContext</span> <span class="hljs-variable">bootstrapContext</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.createBootstrapContext();<br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-built_in">this</span>.configureHeadlessProperty();<br>        <span class="hljs-type">SpringApplicationRunListeners</span> <span class="hljs-variable">listeners</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getRunListeners(args);<br>        listeners.starting(bootstrapContext, <span class="hljs-built_in">this</span>.mainApplicationClass);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ApplicationArguments</span> <span class="hljs-variable">applicationArguments</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultApplicationArguments</span>(args);<br>            <span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.prepareEnvironment(listeners, bootstrapContext, applicationArguments);<br>            <span class="hljs-built_in">this</span>.configureIgnoreBeanInfo(environment);<br>            <span class="hljs-type">Banner</span> <span class="hljs-variable">printedBanner</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.printBanner(environment);<br>            context = <span class="hljs-built_in">this</span>.createApplicationContext();<br>            context.setApplicationStartup(<span class="hljs-built_in">this</span>.applicationStartup);<br>            <span class="hljs-built_in">this</span>.prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);<br>            <span class="hljs-comment">// 加载所有注解使用的扫描的组件</span><br>    <span class="hljs-built_in">this</span>.refreshContext(context);<br>    <span class="hljs-comment">// 刷新</span><br>            <span class="hljs-built_in">this</span>.afterRefresh(context, applicationArguments);<br>            <span class="hljs-type">Duration</span> <span class="hljs-variable">timeTakenToStartup</span> <span class="hljs-operator">=</span> Duration.ofNanos(System.nanoTime() - startTime);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logStartupInfo) &#123;<br>                (<span class="hljs-keyword">new</span> <span class="hljs-title class_">StartupInfoLogger</span>(<span class="hljs-built_in">this</span>.mainApplicationClass)).logStarted(<span class="hljs-built_in">this</span>.getApplicationLog(), timeTakenToStartup);<br>            &#125;<br><br>            listeners.started(context, timeTakenToStartup);<br>            <span class="hljs-built_in">this</span>.callRunners(context, applicationArguments);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable var12) &#123;<br>            <span class="hljs-built_in">this</span>.handleRunFailure(context, var12, listeners);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(var12);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Duration</span> <span class="hljs-variable">timeTakenToReady</span> <span class="hljs-operator">=</span> Duration.ofNanos(System.nanoTime() - startTime);<br>            listeners.ready(context, timeTakenToReady);<br>            <span class="hljs-keyword">return</span> context;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable var11) &#123;<br>            <span class="hljs-built_in">this</span>.handleRunFailure(context, var11, (SpringApplicationRunListeners)<span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(var11);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>所有组件经过<code>org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader</code>方法加载注册组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinitionForImportedConfigurationClass</span><span class="hljs-params">(ConfigurationClass configClass)</span> &#123;<br>        <span class="hljs-type">AnnotationMetadata</span> <span class="hljs-variable">metadata</span> <span class="hljs-operator">=</span> configClass.getMetadata();<br>        <span class="hljs-type">AnnotatedGenericBeanDefinition</span> <span class="hljs-variable">configBeanDef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotatedGenericBeanDefinition</span>(metadata);<br>        <span class="hljs-type">ScopeMetadata</span> <span class="hljs-variable">scopeMetadata</span> <span class="hljs-operator">=</span> scopeMetadataResolver.resolveScopeMetadata(configBeanDef);<br>        configBeanDef.setScope(scopeMetadata.getScopeName());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">configBeanName</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.importBeanNameGenerator.generateBeanName(configBeanDef, <span class="hljs-built_in">this</span>.registry);<br>        AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata);<br>        <span class="hljs-type">BeanDefinitionHolder</span> <span class="hljs-variable">definitionHolder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionHolder</span>(configBeanDef, configBeanName);<br>        definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="hljs-built_in">this</span>.registry);<br>        <span class="hljs-comment">// 在这里注册</span><br><span class="hljs-built_in">this</span>.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition());<br>        configClass.setBeanName(configBeanName);<br>        <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>            logger.trace(<span class="hljs-string">&quot;Registered bean definition for imported class &#x27;&quot;</span> + configBeanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><p><code>org.springframework.beans.factory.support.DefaultListableBeanFactory</code></p><ul><li><code>registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinition</span><span class="hljs-params">(String beanName, BeanDefinition beanDefinition)</span><br><span class="hljs-keyword">throws</span> BeanDefinitionStoreException &#123;<br><br>Assert.hasText(beanName, <span class="hljs-string">&quot;Bean name must not be empty&quot;</span>);<br>Assert.notNull(beanDefinition, <span class="hljs-string">&quot;BeanDefinition must not be null&quot;</span>);<br><br><span class="hljs-keyword">if</span> (beanDefinition <span class="hljs-keyword">instanceof</span> AbstractBeanDefinition) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>((AbstractBeanDefinition) beanDefinition).validate();<br>&#125;<br><span class="hljs-keyword">catch</span> (BeanDefinitionValidationException ex) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionStoreException</span>(beanDefinition.getResourceDescription(), beanName,<br><span class="hljs-string">&quot;Validation of bean definition failed&quot;</span>, ex);<br>&#125;<br>&#125;<br><br><span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">existingDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.beanDefinitionMap.get(beanName);<br><span class="hljs-keyword">if</span> (existingDefinition != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (!isAllowBeanDefinitionOverriding()) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionOverrideException</span>(beanName, beanDefinition, existingDefinition);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (existingDefinition.getRole() &lt; beanDefinition.getRole()) &#123;<br><span class="hljs-comment">// e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE</span><br><span class="hljs-keyword">if</span> (logger.isInfoEnabled()) &#123;<br>logger.info(<span class="hljs-string">&quot;Overriding user-defined bean definition for bean &#x27;&quot;</span> + beanName +<br><span class="hljs-string">&quot;&#x27; with a framework-generated bean definition: replacing [&quot;</span> +<br>existingDefinition + <span class="hljs-string">&quot;] with [&quot;</span> + beanDefinition + <span class="hljs-string">&quot;]&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!beanDefinition.equals(existingDefinition)) &#123;<br><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>logger.debug(<span class="hljs-string">&quot;Overriding bean definition for bean &#x27;&quot;</span> + beanName +<br><span class="hljs-string">&quot;&#x27; with a different definition: replacing [&quot;</span> + existingDefinition +<br><span class="hljs-string">&quot;] with [&quot;</span> + beanDefinition + <span class="hljs-string">&quot;]&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;Overriding bean definition for bean &#x27;&quot;</span> + beanName +<br><span class="hljs-string">&quot;&#x27; with an equivalent definition: replacing [&quot;</span> + existingDefinition +<br><span class="hljs-string">&quot;] with [&quot;</span> + beanDefinition + <span class="hljs-string">&quot;]&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 注册</span><br><span class="hljs-built_in">this</span>.beanDefinitionMap.put(beanName, beanDefinition);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (hasBeanCreationStarted()) &#123;<br><span class="hljs-comment">// Cannot modify startup-time collection elements anymore (for stable iteration)</span><br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.beanDefinitionMap) &#123;<br><span class="hljs-built_in">this</span>.beanDefinitionMap.put(beanName, beanDefinition);<br>List&lt;String&gt; updatedDefinitions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-built_in">this</span>.beanDefinitionNames.size() + <span class="hljs-number">1</span>);<br>updatedDefinitions.addAll(<span class="hljs-built_in">this</span>.beanDefinitionNames);<br>updatedDefinitions.add(beanName);<br><span class="hljs-built_in">this</span>.beanDefinitionNames = updatedDefinitions;<br>removeManualSingletonName(beanName);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Still in startup registration phase</span><br><span class="hljs-built_in">this</span>.beanDefinitionMap.put(beanName, beanDefinition);<br><span class="hljs-built_in">this</span>.beanDefinitionNames.add(beanName);<br>removeManualSingletonName(beanName);<br>&#125;<br><span class="hljs-built_in">this</span>.frozenBeanDefinitionNames = <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (existingDefinition != <span class="hljs-literal">null</span> || containsSingleton(beanName)) &#123;<br>resetBeanDefinition(beanName);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isConfigurationFrozen()) &#123;<br>clearByTypeCache();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合</title>
    <link href="/2022/08/31/%E9%9B%86%E5%90%88%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/08/31/%E9%9B%86%E5%90%88%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>该部分参考 <a href="https://www.runoob.com/java/java-collections.html">菜鸟教程</a></p><p>集合框架被设计成要满足以下几个目标。</p><ul><li>该框架必须是高性能的。基本集合（动态数组，链表，树，哈希表）的实现也必须是高效的。</li><li>该框架允许不同类型的集合，以类似的方式工作，具有高度的互操作性。</li><li>对一个集合的扩展和适应必须是简单的。</li></ul><h5 id="集合接口"><a href="#集合接口" class="headerlink" title="集合接口"></a>集合接口</h5><p>集合框架定义了一些接口。本节提供了每个接口的概述：</p><table><thead><tr><th>序号</th><th>接口描述</th></tr></thead><tbody><tr><td>1</td><td>Collection 接口<br />Collection 是最基本的集合接口，一个 Collection 代表一组 Object，即 Collection 的元素, Java不提供直接继承自Collection的类，只提供继承于的子接口(如List和set)。Collection 接口存储一组不唯一，无序的对象。</td></tr><tr><td>2</td><td>List 接口<br />List接口是一个有序的 Collection，使用此接口能够精确的控制每个元素插入的位置，能够通过索引(元素在List中位置，类似于数组的下标)来访问List中的元素，第一个元素的索引为 0，而且允许有相同的元素。List 接口存储一组不唯一，有序（插入顺序）的对象。</td></tr><tr><td>3</td><td>Set<br />Set 具有与 Collection 完全一样的接口，只是行为上不同，Set 不保存重复的元素。Set 接口存储一组唯一，无序的对象。</td></tr><tr><td>4</td><td>SortedSet<br />继承于Set保存有序的集合。</td></tr><tr><td>5</td><td>Map<br />Map 接口存储一组键值对象，提供key（键）到value（值）的映射。</td></tr><tr><td>6</td><td>Map.Entry<br />描述在一个Map中的一个元素（键&#x2F;值对）。是一个 Map 的内部接口。</td></tr><tr><td>7</td><td>SortedMap<br />继承于 Map，使 Key 保持在升序排列。</td></tr><tr><td>8</td><td>Enumeration<br />这是一个传统的接口和定义的方法，通过它可以枚举（一次获得一个）对象集合中的元素。这个传统接口已被迭代器取代。</td></tr></tbody></table><p>标准集合类汇总于下表：</p><table><thead><tr><th>序号</th><th>类描述</th></tr></thead><tbody><tr><td>1</td><td><strong>AbstractCollection</strong><br />实现了大部分的集合接口。</td></tr><tr><td>2</td><td><strong>AbstractList</strong><br />继承于AbstractCollection 并且实现了大部分List接口。</td></tr><tr><td>3</td><td><strong>AbstractSequentialList</strong><br />继承于 AbstractList ，提供了对数据元素的链式访问而不是随机访问。</td></tr><tr><td>4</td><td><a href="https://www.runoob.com/java/java-linkedlist.html">LinkedList</a><br />该类实现了List接口，允许有null（空）元素。主要用于创建链表数据结构，该类没有同步方法，如果多个线程同时访问一个List，则必须自己实现访问同步，解决方法就是在创建List时候构造一个同步的List。例如：</td></tr></tbody></table><table><thead><tr><th>5</th><th><a href="https://www.runoob.com/java/java-arraylist.html">ArrayList</a><br />该类也是实现了List的接口，实现了可变大小的数组，随机访问和遍历元素时，提供更好的性能。该类也是非同步的,在多线程的情况下不要使用。ArrayList 增长当前长度的50%，插入删除效率低。</th></tr></thead><tbody><tr><td>6</td><td><strong>AbstractSet</strong><br />继承于AbstractCollection 并且实现了大部分Set接口。</td></tr><tr><td>7</td><td><a href="https://www.runoob.com/java/java-hashset.html">HashSet</a><br />该类实现了Set接口，不允许出现重复元素，不保证集合中元素的顺序，允许包含值为null的元素，但最多只能一个。</td></tr><tr><td>8</td><td>LinkedHashSet<br />具有可预知迭代顺序的Set接口的哈希表和链接列表实现。</td></tr><tr><td>9</td><td>TreeSet<br />该类实现了Set接口，可以实现排序等功能。</td></tr><tr><td>10</td><td><strong>AbstractMap</strong><br />实现了大部分的Map接口。</td></tr><tr><td>11</td><td><a href="https://www.runoob.com/java/java-hashmap.html">HashMap</a><br />HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。<br />该类实现了Map接口，根据键的HashCode值存储数据，具有很快的访问速度，最多允许一条记录的键为null，不支持线程同步。</td></tr><tr><td>12</td><td>TreeMap<br />继承了AbstractMap，并且使用一颗树。</td></tr><tr><td>13</td><td>WeakHashMap<br />继承AbstractMap类，使用弱密钥的哈希表。</td></tr><tr><td>14</td><td>LinkedHashMap<br />继承于HashMap，使用元素的自然顺序对元素进行排序.</td></tr><tr><td>15</td><td>IdentityHashMap<br />继承AbstractMap类，比较文档时使用引用相等。</td></tr></tbody></table><p>集合图</p><p><img src="https://cdn.staticaly.com/gh/wuxin0011/blog-resource@main/picgo/image-20220805093804-6akeyvh.png">​</p><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><ul><li>ArrayList</li><li>LinkedList</li><li>Vector</li><li>Stack</li></ul><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a><strong>ArrayList</strong></h5><p>继承图</p><p><img src="https://cdn.staticaly.com/gh/wuxin0011/blog-resource@main/picgo/arrayList.png">​</p><p>最基本的list，底层是数组 new Object[]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">// 默认构造方法，可以默认指定容量</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>&#125;<br><span class="hljs-comment">/*    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;*/</span><br></code></pre></td></tr></table></figure><p>迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ArrayList返回的迭代器</span><br><span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Itr</span>();<br> &#125;<br><br> <br> <span class="hljs-comment">// Itr是ArrayList的一个内部类，实现了Iterator接口，内部实现参考源代码</span><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Itr</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a><strong>LinkedList</strong></h5><p>继承图</p><p><img src="https://cdn.staticaly.com/gh/wuxin0011/blog-resource@main/picgo/linkedList.png">​</p><p>底层是节点  包含自身，上一个节点和下一关节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>        E item;<br>        Node&lt;E&gt; next;<br>        Node&lt;E&gt; prev;<br><br>        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;<br>            <span class="hljs-built_in">this</span>.item = element;<br>            <span class="hljs-built_in">this</span>.next = next;<br>            <span class="hljs-built_in">this</span>.prev = prev;<br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// linkedlist 的listIterator 方法</span><br><span class="hljs-keyword">public</span> ListIterator&lt;E&gt; <span class="hljs-title function_">listIterator</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        checkPositionIndex(index);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListItr</span>(index);<br>&#125;<br><span class="hljs-comment">// ListItr  是 linkedlist 内部类</span><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListItr</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ListIterator</span>&lt;E&gt; &#123;&#125;<br><br><br><span class="hljs-comment">// ListIterator继承了Iterator</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ListIterator</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt; &#123;<br></code></pre></td></tr></table></figure><h5 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a><strong>Vector</strong></h5><p><img src="https://cdn.staticaly.com/gh/wuxin0011/blog-resource@main/picgo/stack.png">​</p><p>底存也是数组，不过相关方法添加了关键词 <code>synchronized</code>,所以操作时候效率较ArrayList效率低</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*其中一个构造方法*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">int</span> capacityIncrement)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                                               initialCapacity);<br>        <span class="hljs-built_in">this</span>.elementData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initialCapacity];<br>        <span class="hljs-built_in">this</span>.capacityIncrement = capacityIncrement;<br> &#125;<br><br></code></pre></td></tr></table></figure><p>以为 add方法为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>       modCount++;<br>       ensureCapacityHelper(elementCount + <span class="hljs-number">1</span>);<br>       elementData[elementCount++] = e;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Itr</span>();<br> &#125;<br><br><span class="hljs-comment">// 内部实现请参考源代码</span><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Itr</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><h5 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a><strong>Stack</strong></h5><p><img src="https://cdn.staticaly.com/gh/wuxin0011/blog-resource@main/picgo/stack.png">​</p><p>继承了Vector，因此具有Vector的特点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Stack类表示对象的后进先出 (LIFO) 堆栈。它使用五个操作扩展类Vector ，这些操作允许将向量视为堆栈。提供了通常的push和pop操作，以及查看堆栈顶部项目的方法，测试堆栈是否为空的方法，以及在堆栈中搜索项目并发现它有多远的方法是从顶部。</span><br><span class="hljs-comment">首次创建堆栈时，它不包含任何项目。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Vector</span>&lt;E&gt;&#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a><strong>Map</strong></h4><ul><li>HashMap</li><li>HashTable</li></ul><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><ul><li><p>底层是哈希表，</p></li><li><p>HashMap的实例有两个影响其性能的参数：初始容量和负载因子</p></li></ul><p><img src="https://cdn.staticaly.com/gh/wuxin0011/blog-resource@main/picgo/Snipaste_2022-08-05_12-22-35.png">​</p><p>核心构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 存放内容</span><br><span class="hljs-keyword">transient</span> Node&lt;K,V&gt;[] table;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">float</span> loadFactor)</span> &#123;<br>        <span class="hljs-comment">// 容量判断</span><br>        <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal initial capacity: &quot;</span> +<br>                                               initialCapacity);<br>        <span class="hljs-keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)<br>            initialCapacity = MAXIMUM_CAPACITY;<br>        <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>                                               loadFactor);<br>        <span class="hljs-built_in">this</span>.loadFactor = loadFactor; <span class="hljs-comment">// 负载因子 默认 0.75f</span><br>        <span class="hljs-built_in">this</span>.threshold = tableSizeFor(initialCapacity);<br>&#125;<br><br><span class="hljs-comment">// 内部类table 的基本内容</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry&lt;K,V&gt; &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> hash;<br>        <span class="hljs-keyword">final</span> K key;<br>        V value;<br>        Node&lt;K,V&gt; next;<br><br>        Node(<span class="hljs-type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;<br>            <span class="hljs-built_in">this</span>.hash = hash;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.next = next;<br>&#125;<br></code></pre></td></tr></table></figure><p>put方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">                  <span class="hljs-type">boolean</span> evict)</span> &#123;<br>       <span class="hljs-comment">// 初始化</span><br>       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br>       <span class="hljs-comment">// 初始化判断，如果table内容为null或者长度为0 给个初始容量 默认为 16</span><br>       <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>           n = (tab = resize()).length;<br>       <span class="hljs-comment">// 根据长度和 hashcode与运算，计算索引，如果tabl[index]内容为null 生成一个节点</span><br>       <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>           tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>       <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-comment">// 初始化</span><br>           Node&lt;K,V&gt; e; K k;<br>           <span class="hljs-comment">// 如果内容不为null计算 hashcode与key是否相等 或者 key.equal(k) ==&gt; k=p.key</span><br>           <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>               ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>               e = p;<br>           <span class="hljs-comment">// 判断是否是树化节点，如果是树化节点，根据treeNode类添加</span><br>           <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>               e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>           <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-comment">// 遍历</span><br>               <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                   <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                       p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                       <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                           treeifyBin(tab, hash);<br>                       <span class="hljs-keyword">break</span>;<br>                   &#125;<br>                   <span class="hljs-comment">// 遍历判断 hashCode和 key是否相等 或者 key.equals(k) =&gt; k=e.key</span><br>                   <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                       ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                       <span class="hljs-keyword">break</span>;<br>                   p = e;<br>               &#125;<br>           &#125;<br>           <span class="hljs-comment">// 判断是否生成了e 如果e!=null</span><br>           <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <br>               <span class="hljs-comment">// 保存 原来value</span><br>               <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>               <span class="hljs-comment">// 存在节点同时，内容 是否为空或者 oblyIfAbsent 是否修改当前值 默认为false</span><br>               <span class="hljs-comment">// !onlyIfAbsent = true ，默认修改值</span><br>               <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                   e.value = value;<br>               afterNodeAccess(e);<br>               <span class="hljs-keyword">return</span> oldValue;<br>           &#125;<br>       &#125;<br>       ++modCount;<br>       <span class="hljs-comment">// 判断容量是否超过 如果超过了容量扩大两倍</span><br>       <span class="hljs-comment">// threshold = Integer.MAX_VALUE; </span><br>       <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>           resize();<br>       afterNodeInsertion(evict);<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>树节点类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LinkedHashMap</span>.Entry&lt;K,V&gt; &#123;<br>        TreeNode&lt;K,V&gt; parent;  <span class="hljs-comment">// red-black tree links</span><br>        TreeNode&lt;K,V&gt; left;<br>        TreeNode&lt;K,V&gt; right;<br>        TreeNode&lt;K,V&gt; prev;    <span class="hljs-comment">// needed to unlink next upon deletion</span><br>        <span class="hljs-type">boolean</span> red;<br>        TreeNode(<span class="hljs-type">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;<br>            <span class="hljs-built_in">super</span>(hash, key, val, next);<br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>HashMap 主要 有三种 迭代器,这里迭代器有 key 的迭代器，和 value的迭代器</p><p><img src="https://cdn.staticaly.com/gh/wuxin0011/blog-resource@main/picgo/Snipaste_2022-08-05_11-36-49.png">​</p><h5 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h5><p>继承图</p><p><img src="https://cdn.staticaly.com/gh/wuxin0011/blog-resource@main/picgo/hashtable.png">​</p><p>HashTable核心构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Hashtable</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">float</span> loadFactor)</span> &#123;<br>         <span class="hljs-comment">// 容量初始化判断 不能小于0 而且必须是 float类型数据</span><br>        <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                                               initialCapacity);<br>        <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Load: &quot;</span>+loadFactor);<br><br>        <span class="hljs-keyword">if</span> (initialCapacity==<span class="hljs-number">0</span>)<br>            initialCapacity = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">this</span>.loadFactor = loadFactor;<br>        table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;?,?&gt;[initialCapacity];<br>        threshold = (<span class="hljs-type">int</span>)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="hljs-number">1</span>);<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>hashtable 的 put方法和内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-comment">// Make sure the value is not null</span><br>        <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>        &#125;<br><br>        <span class="hljs-comment">// Makes sure the key is not already in the hashtable.</span><br>        Entry&lt;?,?&gt; tab[] = table;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> key.hashCode();<br>        <span class="hljs-comment">// 通过计算得到 索引 </span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;<br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>        Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];<br>        <span class="hljs-comment">// 遍历比较 值 如果不为null 更新 原来只</span><br>        <span class="hljs-keyword">for</span>(; entry != <span class="hljs-literal">null</span> ; entry = entry.next) &#123;<br>            <span class="hljs-keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;<br>                <span class="hljs-type">V</span> <span class="hljs-variable">old</span> <span class="hljs-operator">=</span> entry.value;<br>                entry.value = value;<br>                <span class="hljs-keyword">return</span> old;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 如果遍历没有返回 添加 到 hashtable中</span><br>        addEntry(hash, key, value, index);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-comment">// Hashtable 静态内部类  Entry</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry&lt;K,V&gt; &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> hash;<br>        <span class="hljs-keyword">final</span> K key;<br>        V value;<br>        Entry&lt;K,V&gt; next;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-title function_">Entry</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, Entry&lt;K,V&gt; next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.hash = hash;<br>            <span class="hljs-built_in">this</span>.key =  key;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>其他方法参考Hashtable源代码</p><h5 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h5><p><img src="https://cdn.staticaly.com/gh/wuxin0011/blog-resource@main/picgo/treeMap.png">​</p><p>TreeMap 基于 NavigableMap实现了红黑树，实现了SortMap因此，具有顺序</p><p>put方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>      Entry&lt;K,V&gt; t = root;<br>      <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>) &#123;<br>          compare(key, key); <span class="hljs-comment">// type (and possibly null) check</span><br><br>          root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;&gt;(key, value, <span class="hljs-literal">null</span>);<br>          size = <span class="hljs-number">1</span>;<br>          modCount++;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br>      <span class="hljs-type">int</span> cmp;<br>      Entry&lt;K,V&gt; parent;<br>      <span class="hljs-comment">// split comparator and comparable paths</span><br>      Comparator&lt;? <span class="hljs-built_in">super</span> K&gt; cpr = comparator;<br>      <span class="hljs-keyword">if</span> (cpr != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">do</span> &#123;<br>              parent = t;<br>              cmp = cpr.compare(key, t.key);<br>              <span class="hljs-keyword">if</span> (cmp &lt; <span class="hljs-number">0</span>)<br>                  t = t.left;<br>              <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmp &gt; <span class="hljs-number">0</span>)<br>                  t = t.right;<br>              <span class="hljs-keyword">else</span><br>                  <span class="hljs-keyword">return</span> t.setValue(value);<br>          &#125; <span class="hljs-keyword">while</span> (t != <span class="hljs-literal">null</span>);<br>      &#125;<br>      <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>)<br>              <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>          <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>              Comparable&lt;? <span class="hljs-built_in">super</span> K&gt; k = (Comparable&lt;? <span class="hljs-built_in">super</span> K&gt;) key;<br>          <span class="hljs-keyword">do</span> &#123;<br>              parent = t;<br>              cmp = k.compareTo(t.key);<br>              <span class="hljs-keyword">if</span> (cmp &lt; <span class="hljs-number">0</span>)<br>                  t = t.left;<br>              <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmp &gt; <span class="hljs-number">0</span>)<br>                  t = t.right;<br>              <span class="hljs-keyword">else</span><br>                  <span class="hljs-keyword">return</span> t.setValue(value);<br>          &#125; <span class="hljs-keyword">while</span> (t != <span class="hljs-literal">null</span>);<br>      &#125;<br>      Entry&lt;K,V&gt; e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;&gt;(key, value, parent);<br>      <span class="hljs-keyword">if</span> (cmp &lt; <span class="hljs-number">0</span>)<br>          parent.left = e;<br>      <span class="hljs-keyword">else</span><br>          parent.right = e;<br>      fixAfterInsertion(e);<br>      size++;<br>      modCount++;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry&lt;K,V&gt; &#123;<br>        K key;<br>        V value;<br>        Entry&lt;K,V&gt; left;<br>        Entry&lt;K,V&gt; right;<br>        Entry&lt;K,V&gt; parent;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> BLACK;<br><br>        Entry(K key, V value, Entry&lt;K,V&gt; parent) &#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.parent = parent;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><ul><li>HashSet</li><li>LinkedHashSet</li><li>TreeSet</li></ul><h5 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a><strong>HashSet</strong></h5><p>继承图</p><p><img src="https://cdn.staticaly.com/gh/wuxin0011/blog-resource@main/picgo/hashset.png">​</p><p>底层是HashMap,因此value相当于是 map的key，map的value 值是固定为 PRESENT， 因此，不允许重复！是无序的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// HashSet其中一个构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">()</span> &#123;<br>        map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>&#125;<br><br><span class="hljs-comment">// add 调用的是hashmap put方法，其中 PRESENT =  new Object();</span><br> <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-literal">null</span>;<br> &#125;<br><br><span class="hljs-comment">//迭代器 迭代器使用的是map的迭代器</span><br><span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> map.keySet().iterator();<br> &#125;<br><br><span class="hljs-comment">// keySet 是 HashMap 一个内部类 具体内容参考HashMap源代码</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KeySet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractSet</span>&lt;K&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><h5 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a><strong>LinkedHashSet</strong></h5><p>继承了  HashSet，此实现与HashSet的不同之处在于它维护一个双向链表，该列表贯穿其所有条目。这个链表定义了迭代顺序，即元素插入集合的顺序（插入顺序）。请注意，如果将元素重新插入集合中，则插入顺序不受影响。 （如果s.add(e)被调用，而s.contains(e)将在调用之前立即返回true ，则元素e被重新插入到集合s中。）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;E&gt;<br>    <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashSet</span>&lt;E&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Set</span>&lt;E&gt;, Cloneable, java.io.Serializable &#123;&#125;<br></code></pre></td></tr></table></figure><h5 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h5><p>继承图</p><p><img src="https://cdn.staticaly.com/gh/wuxin0011/blog-resource@main/picgo/treeset.png">​</p><p>底层是 treemap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeSet</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;E,Object&gt;());<br>&#125;<br><br><span class="hljs-comment">// add</span><br> <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">return</span> m.put(e, PRESENT)==<span class="hljs-literal">null</span>;<br> &#125;<br><br><span class="hljs-comment">// 迭代器</span><br> <span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> m.navigableKeySet().iterator();<br> &#125;<br></code></pre></td></tr></table></figure><p><strong>set和List区别</strong></p><ul><li><p>Set 接口实例存储的是无序的，不重复的数据。List 接口实例存储的是有序的，可以重复的元素。</p></li><li><p>Set 检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变</p></li><li><p>List 和数组类似，可以动态增长，根据实际存储的数据的长度自动增长 List 的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变</p></li></ul><p><strong>SortedSet</strong></p><p>元素使用它们的自然顺序排序，或者由通常在排序集创建时提供的Comparator排序。集合的迭代器将按元素升序遍历集合。</p><ul><li>KeySet</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// TreeMap 的一个静态内部类</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KeySet</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractSet</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NavigableSet</span>&lt;E&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/wuxin0011/blog-resource@main/picgo/Snipaste_2022-08-05_11-53-38.png">​</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
